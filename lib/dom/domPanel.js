/* See license.txt for terms of usage */

"use strict";

module.metadata = {
  "stability": "experimental"
};

var self = require("sdk/self");
var main = require("../main.js");

const { Cu, Ci } = require("chrome");
const { BasePanel } = require("../chrome/basePanel");
const { Class } = require("sdk/core/heritage");
const { Trace, TraceError } = require("../core/trace.js").get(module.id);
const { Tool } = require("dev/toolbox");
const { Locale } = require("../core/locale.js");
const { DomTree } = require("../dom/domTree.js");
const { DomProvider } = require("../dom/domProvider.js");
const { loadSheet, removeSheet } = require("sdk/stylesheet/utils");
const { defer } = require("sdk/core/promise");
const { getFrameElement } = require("sdk/window/utils");
const { TextSearch } = require("./textSearch.js");
const { Dom } = require("../core/dom.js");
const { Css } = require("../core/css.js");
const { target } = require("../target.js");
const { Theme } = require("../chrome/theme.js");
const { setTimeout } = require("sdk/timers");

const { gDevTools } = Cu.import("resource:///modules/devtools/gDevTools.jsm", {});

// xxxHonza: part of the workaround for 1075490 (see the bottom of the file).
// Use the same weird panel ID that is generated by the SDK.
// There are places in the code (test, unregistering) that use the ID.
const panelId = "dev-panel-firebugsoftware-joehewitt-com-DOM";

/**
 * @panel This object implements a main DOM panel. It displays structure
 * of the current document. The panel might be converted into DevTools SDK
 * example showing how to render remote objects (grips) by using repository
 * of registered templates {@Reps}.
 */
const DomPanel = Class(
/** @lends DomPanel */
{
  extends: BasePanel,

  label: Locale.$STR("dom.panel.title"),
  tooltip: Locale.$STR("dom.panel.tip"),
  icon: "./icon-16.png",
  url: "./dom.html",
  searchable: true,

  // Initialization
  initialize: function(options) {
    BasePanel.prototype.initialize.apply(this, arguments);

    Trace.sysout("DomPanel.initialize;", options);
  },

  setup: function({debuggee, frame, toolbox}) {
    BasePanel.prototype.setup.apply(this, arguments);

    Trace.sysout("DomPanel.setup;", frame);
  },

  open: function(window, toolbox) {
    let parentDoc = toolbox.doc;
    let iframe = parentDoc.getElementById("toolbox-panel-iframe-" + panelId);

    let self = this;

    // Make sure the iframe content window is ready.
    let deferredIframe = defer();
    let win = iframe.contentWindow;
    if (win && win.document && win.document.readyState === "complete") {
      Trace.sysout("domPanel.complete;");
      deferredIframe.resolve(self);
    }
    else {
      iframe.addEventListener("load", function onIframeLoad() {
        iframe.removeEventListener("load", onIframeLoad, true);
        Trace.sysout("domPanel.load;");
        deferredIframe.resolve(self);
      }, true);
    }

    this.chrome.getPanelWhenReady(panelId).then(panel => {
      Trace.sysout("ready ", panel)
      panel.onReady();
    });

    return deferredIframe.promise;
  },

  onReady: function() {
    BasePanel.prototype.onReady.apply(this, arguments);

    Trace.sysout("DomPanel.onReady;", this);

    // xxxHonza: dom.html doesn't include the theme-switching.js file
    // and so, theme events are not fired for it FIX ME
    // We might want to change dom.html to dom.xul and put it into
    // chrome directory to also fix:
    // issue #15 - DomTree items are not expandable
    // In such case 'onStateChange' event that causes onReady method
    // to be executed doesn't have to be called.
    let win = this.getPanelWindow();
    loadSheet(win, "chrome://firebug/skin/domTree.css", "author");
    loadSheet(win, "chrome://firebug/skin/panelbase.css", "author");

    this.update();
  },

  initContext: function(context) {
    BasePanel.prototype.initContext.apply(this, arguments);

    this.update();
  },

  update: function() {
    Trace.sysout("domPanel.update;");

    // Get the current {@ThreadClient}. It might cause tab attach
    // (happens asynchronously) if the toolbox isn't attached yet.
    let target = this.toolbox.target;
    target.activeTab.attachThread({}, (response, threadClient) => {
      Trace.sysout("domPanel.update; threadClient", arguments);

      // Attach Console. It might involve RDP communication, so wait
      // asynchronously for the result
      this.attachConsole(threadClient).then(consoleClient => {
        Trace.sysout("domPanel.update; consoleClient", arguments);

        // Evaluate an expression to get the top level actor.
        // The goal is to render that actor in the panel content.
        consoleClient.evaluateJS("document", (response) => {
          Trace.sysout("domPanel.update; document", arguments);

          this.refresh(response.result);

          // xxxHonza: this is needed? Shouldn't it resume automatically?
          threadClient.resume();
        });

        // An example of getting node info (e.g. isDisplayed)
        /*this.toolbox.initInspector().then(() => {
          let expr = "document.getElementById('hidden')";
          consoleClient.evaluateJS(expr, (response) => {
            let objectActor = response.result;
            let walker = this.toolbox.walker;
            walker.getNodeActorFromObjectActor(objectActor.actor).
              then((nodeFront) => {
                Trace.sysout("nodeFront", nodeFront);
              });
          });
        })*/
      });
    });
  },

  attachConsole: function(threadClient) {
    let deferred = defer();
    let debuggerClient = threadClient.client;
    let consoleActor = this.toolbox.target.form.consoleActor;

    debuggerClient.attachConsole(consoleActor, ["ConsoleAPI"],
      (response, webConsoleClient) => {

      Trace.sysout("domPanel.attachConsole; ", arguments);

      if (response.error) {
        deferred.reject(response);
      } else {
        deferred.resolve(webConsoleClient);
      }
    });

    return deferred.promise;
  },

  // Selection
  select: function(object) {
    Trace.sysout("domPanel.select; object:", object);

    this.refresh(object);
  },

  refresh: function(actor) {
    Trace.sysout("domPanel.refresh; actor:", actor);

    let target = this.toolbox.target;
    if (!target) {
      return;
    }

    let context = this.getContext();
    context.getCache().then(cache => {
      let provider = new DomProvider(cache);
      this.tree = new DomTree(provider);
      this.tree.replace(this.panelNode, {object: actor});

      this.emit("refreshed", this.tree);
    });
  },

  // Theme

  onApplyTheme: function(iframeWin, oldTheme) {
    Trace.sysout("domPanel.onApplyTheme;");

    loadSheet(iframeWin, "chrome://firebug/skin/domTree.css", "author");
  },

  onUnapplyTheme: function(iframeWin, newTheme) {
    Trace.sysout("domPanel.onUnapplyTheme;");

    removeSheet(iframeWin, "chrome://firebug/skin/domTree.css", "author");
  },

  // Toolbar

  getPanelToolbarButtons: function() {
    let buttons = [];

    buttons.push({
      label: "dom.refresh.label",
      tooltiptext: "dom.refresh.tip",
      command: this.onRefresh.bind(this)
    });

    return buttons;
  },

  // Commands

  onRefresh: function() {
    this.update();
  },

  // Search

  onSearch: function(text, reverse) {
    FBTrace.sysout("domPanel.onSearch; " + text);

    let doc = this.getPanelDocument();
    let caseSensitive = false;

    if (!text) {
      delete this.currentSearch;
      this.highlightNode(null);
      doc.defaultView.getSelection().removeAllRanges();
      return false;
    }

    var row;
    if (this.currentSearch && text === this.currentSearch.text) {
      row = this.currentSearch.findNext(true, undefined, reverse,
        caseSensitive);
    } else {
      let findRow = function(node) {
        return Dom.getAncestorByClass(node, "memberRow");
      };

      this.currentSearch = new TextSearch(this.panelNode, findRow);
      row = this.currentSearch.find(text, reverse, caseSensitive);
    }

    if (row) {
      let sel = doc.defaultView.getSelection();
      sel.removeAllRanges();
      sel.addRange(this.currentSearch.range);

      Dom.scrollIntoCenterView(row, this.panelNode);

      this.highlightNode(row);
      return true;
    }
    else
    {
      doc.defaultView.getSelection().removeAllRanges();
      return false;
    }
  },

  /**
   * Called by search in the case something was found. This will highlight
   * the given node for a specific time-span. There's only one node
   * highlighted at a time.
   *
   * @param {Node} Node to highlight
   */
  highlightNode: function(node) {
    if (this.highlightedNode) {
      Css.cancelClassTimed(this.highlightedNode, "jumpHighlight");
    }

    this.highlightedNode = node;

    if (node) {
      Css.setClassTimed(node, "jumpHighlight");
    }
  },
});

// DOM Panel Registration

function registerDomPanel() {
  if (gDevTools.getToolDefinition(panelId)) {
    return;
  }

  // xxxHonza: workaround for SDK issue: Use of type=content iframes in
  // toolbox breaks dock to side feature
  // https://bugzilla.mozilla.org/show_bug.cgi?id=1075490
  // Let's create the pane using the platform API instead of SDK.
  // The SDK replaces the original iframe with new iframe that
  // uses type="content".
  gDevTools.registerTool({
    id: panelId,
    url: self.data.url("dom.html"),
    label: Locale.$STR("dom.panel.title"),
    tooltip: Locale.$STR("dom.panel.tip"),
    isTargetSupported: target => target.isLocalTab,
    build: (window, toolbox) => {
      let frame = getFrameElement(window);
      let doc = frame.ownerDocument;
      let panel = new DomPanel();
      frame = panel.createView(doc, frame);
      panel.setup({window: window, toolbox: toolbox, frame: frame});
      return panel.open(window, toolbox);
    }
  });

  /*const domTool = new Tool({
    name: "DOM Tool",
    panels: {
      domPanel: DomPanel
    }
  });*/
}

function unregisterDomPanel() {
  if (!gDevTools.getToolDefinition(panelId)) {
    return;
  }

  gDevTools.unregisterTool({
    id: panelId
  });
}

// Global Theme Events

/**
 * The DOM panel is available only when the Firebug theme is activated.
 * So, make sure it's registered and unregistered properly according
 * to the theme activation.
 */
function onApplyTheme(win) {
  let toolbox = main.Firebug.getToolbox(win);
  if (!toolbox) {
    return;
  }

  // Registering a panel in 'onThemeApply' event handler happens
  // at a special moment where the Toolbox instance already exists,
  // receives "tool-registered" events, but the "toolbox-tabs"
  // XUL element isn't available yet. The result is an exception saying
  // TypeError: tabs is null: toolbox.js:864 (within _buildTabForTool)
  // This can't happen when the panel is registered during module load
  // since the Toolbox doesn't exist yet and can't receive "tool-registered"
  // event. The toolbox auto-creates tabs for registered panels when opened.
  // See also: https://github.com/firebug/firebug.next/issues/213
  let tabs = toolbox.doc.getElementById("toolbox-tabs");
  if (tabs) {
    setTimeout(() => {
      registerDomPanel();
    });
  }
}

function onUnapplyTheme() {
  unregisterDomPanel();
}

// Initialization and Shutdown

target.on("initialize", Firebug => {
  Trace.sysout("domPanel.module.initialize;");

  Theme.addThemeListeners(onApplyTheme, onUnapplyTheme);
});

target.on("shutdown", Firebug => {
  Trace.sysout("domPanel.module.shutdown;");

  Theme.removeThemeListeners(onApplyTheme, onUnapplyTheme);

  onUnapplyTheme();
});

// Exports from this module
exports.DomPanel = DomPanel;
exports.domPanelId = panelId;
