/* See license.txt for terms of usage */

"use strict";

const self = require("sdk/self");

// Add-on SDK
const { Cu, Ci } = require("chrome");
const { Class } = require("sdk/core/heritage");
const { Tool } = require("dev/toolbox");
const { defer, resolve } = require("sdk/core/promise");

// Firebug SDK
const { Trace, TraceError } = require("firebug.sdk/lib/core/trace.js").get(module.id);
const { Content } = require("firebug.sdk/lib/core/content.js");
const { Str } = require("firebug.sdk/lib/core/string.js");
const { Locale } = require("firebug.sdk/lib/core/locale.js");
const { Dom } = require("firebug.sdk/lib/core/dom.js");
const { PanelBase } = require("firebug.sdk/lib/panel-base.js");
const { PanelToolbar } = require("firebug.sdk/lib/panel-toolbar.js");

// Firebug
const { GripProvider } = require("../dom/grip-provider.js");

// xxxHonza: part of the workaround for 1075490 (see the bottom of the file).
// Use the same weird panel ID that is generated by the SDK.
// There are places in the code (test, unregistering) that use the ID.
const panelId = "dev-panel-firebugsoftware-joehewitt-com-DOM2";

/**
 * This object represents a new {@Toolbox} panel
 */
const DomPanel = Class(
/** @lends DomPanel */
{
  extends: PanelBase,

  label: Locale.$STR("dom.panel.title"),
  tooltip: Locale.$STR("dom.panel.tip"),
  icon: "chrome://firebug/skin/tool-dom.png",
  url: "./dom/dom.html",
  searchable: true,

  // Initialization

  initialize: function(options) {
    this.extends.initialize.apply(this, arguments);

    this.onTabNavigated = this.onTabNavigated.bind(this);
  },

  destroy: function() {
    this.extends.destroy.apply(this, arguments);

    this.toolbox.target.off("navigate", this.onTabNavigated);
  },

  onReady: function() {
    this.extends.onReady.apply(this, arguments);

    Trace.sysout("DomPanel.onReady;", this.debuggee);

    let win = this.panelFrame.contentWindow;
    win.addEventListener("firebug/content/message",
      this.onContentMessage, true);

    this.toolbar = new PanelToolbar({
      parentNode: this.panelFrame.parentNode,
      insertBefore: this.panelFrame
    });

    this.toolbar.createItems(this.getPanelToolbarButtons());

    this.toolbox.target.on("navigate", this.onTabNavigated);
  },

  onTabNavigated: function() {
    this.onRefresh();
  },

  // Toolbar

  getPanelToolbarButtons: function() {
    let buttons = [];

    buttons.push({
      label: "dom.refresh.label",
      tooltiptext: "dom.refresh.tip",
      command: this.onRefresh.bind(this)
    });

    return buttons;
  },

  // Commands

  onRefresh: function() {
    this.refresh().then(rootGrip => {
      this.postContentMessage("refresh", rootGrip);
    });
  },

  refresh: function() {
    Trace.sysout("DomPanel.refresh;");

    let deferred = defer();

    // We need the thread object to get client object for grips
    // (using threadClient.pauseGrip).
    let target = this.toolbox.target;
    target.activeTab.attachThread({}, (response, threadClient) => {
      this.threadClient = threadClient;

      // Attach Console. It might involve RDP communication, so wait
      // asynchronously for the result
      this.attachConsole(threadClient).then(consoleClient => {
        Trace.sysout("DomPanel.update; consoleClient", consoleClient);

        // Evaluate an expression to get the top level actor.
        // The goal is to render that actor in the panel content.
        consoleClient.evaluateJS("window", (response) => {
          Trace.sysout("DomPanel.update; window grip received", response);

          this.rootGrip = response.result;

          // Do not forget to resume the debugger.
          if (threadClient.paused) {
            threadClient.resume();
          }

          deferred.resolve(response.result);
        });
      });
    });

    return deferred.promise;
  },

  // Attach/detach

  attach: function() {
    Trace.sysout("DomPanel.attach;", this.debuggee);
    return this.refresh();
  },

  getContentConfig: function(config) {
    config.rootGrip = JSON.stringify(this.rootGrip);
    return config;
  },

  // Content Messages

  getPrototypeAndProperties: function(grip) {
    let provider = new GripProvider(this.toolbox.target);
    provider.getPrototypeAndProperties(grip).then(response => {
      this.postContentMessage("onPrototypeAndProperties",
        JSON.stringify(response));
    });
  },

  // Helpers

  attachConsole: function(threadClient) {
    let deferred = defer();
    let debuggerClient = threadClient.client;
    let consoleActor = this.toolbox.target.form.consoleActor;

    debuggerClient.attachConsole(consoleActor, ["ConsoleAPI"],
      (response, webConsoleClient) => {

      Trace.sysout("DomPanel.attachConsole; ", arguments);

      if (response.error) {
        deferred.reject(response);
      } else {
        deferred.resolve(webConsoleClient);
      }
    });

    return deferred.promise;
  },
});

const domTool = new Tool({
  name: "DomTool",
  panels: {
    DomPanel: DomPanel
  }
});

// Exports from this module
exports.DomPanel = DomPanel;
exports.domPanelId = panelId;
